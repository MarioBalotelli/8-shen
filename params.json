{
  "name": "Baba-s-blog",
  "tagline": "巴神的博客",
  "body": "# //参考答案\r\n#     //类式继承\r\n#     function ParentClass() {\r\n#         this.Pname = \"ParentClass\";\r\n#     }\r\n#     ParentClass.prototype = {\r\n#         getPName: function () {\r\n#             return this.Pname;\r\n#         }\r\n#     };\r\n#     function ChildClass() {\r\n#         this.Cname = \"ChildClass\";\r\n#     }\r\n#     ChildClass.prototype = new ParentClass();\r\n#     ChildClass.prototype.constructor = ChildClass;\r\n#     ChildClass.prototype.getCName = function () {\r\n#         return this.Cname;\r\n#     };\r\n#     console.log(new ChildClass());\r\n#     //构造函数继承\r\n#     function Parent() {\r\n#         this.Pname = \"Parent\";\r\n#         this.id = 1;\r\n#     }\r\n#     Parent.prototype = {\r\n#         getPName: function () {\r\n#             return this.Pname;\r\n#         }``\r\n#     };\r\n#     function Child() {\r\n#         Parent.call(this);\r\n#         this.Cname = \"Child\";\r\n#     }\r\n#     console.log(new Child());\r\n#     //原型式继承\r\n#     function P(obj) {\r\n#         function F() { }\r\n#         F.prototype = obj;\r\n#         return new F();\r\n#     }\r\n#     //测试\r\n#     var object = {\r\n#         a: 1,\r\n#         b: 2\r\n#     };\r\n#     console.log(P(object));\r\n#     //寄生式继承\r\n#     var obj = {\r\n#         name: \"obj\",\r\n#         id: 1\r\n#     };\r\n#     function createObj(obj) {\r\n#         var o = new P(obj);\r\n#         o.getName = function () {\r\n#             return name;\r\n#         };\r\n#         return o;\r\n#     }\r\n#     console.log(createObj(obj));\r\n#     //总结一下前面的继承方式\r\n#     function inherit(parent, child) {\r\n#         var p = P(parent);//调用前面原型式继承\r\n#         p.constructor = parent;\r\n#         child.prototype = p;\r\n#     }\r\n#     //测试\r\n#     //父\r\n#     function Par() {\r\n#         this.par = \"Par\";\r\n#     }\r\n#     Par.prototype = {\r\n#         fn1: function () {\r\n#         },\r\n#         fn2: function () {\r\n#         }\r\n#     };\r\n#     //子\r\n#     function Chi() {\r\n#         this.chi = \"Chi\";\r\n#     }\r\n#     inherit(Par, Chi);\r\n#     console.log(Chi);\r\n#     //多继承\r\n#     //我们先来简单实现一个类似jquery的extend的方法\r\n#     var extend = function () {\r\n#         var args = arguments, target = args[0] || {}, k = 0, l = args.length;\r\n#         while (++k <= l) {\r\n#             var arg = args[k];\r\n#             for (var prop in arg) {\r\n#                 target[prop] = arg[prop];\r\n#             }\r\n#         }\r\n#         return target;\r\n#     };\r\n#     //下面定义几个类\r\n#     function A() {\r\n#         this.aName = \"A\";\r\n#     }\r\n#     A.prototype = {\r\n#         getAName: function () {\r\n#             return this.aName;\r\n#         }\r\n#     };\r\n#     function B() {\r\n#         this.bName = \"B\";\r\n#     }\r\n#     B.prototype = {\r\n#         getBName: function () {\r\n#             return this.bName;\r\n#         }\r\n#     };\r\n#     function C() {\r\n#         this.aName = \"C\";\r\n#     }\r\n#     C.prototype = {\r\n#         getCName: function () {\r\n#             return this.cName;\r\n#         }\r\n#     };\r\n#     //我们让D来继承A、B、C\r\n#     function D() {\r\n#         A.call(this);\r\n#         B.call(this);\r\n#         C.call(this);\r\n#         this.aName = \"D\";\r\n#     }\r\n#     D.prototype = extend(C.prototype, B.prototype, A.prototype, {\r\n#         getDName: function () {\r\n#             return this.dName;\r\n#         }\r\n#     });\r\n#     console.log(new D());",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}